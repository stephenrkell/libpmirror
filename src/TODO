Design for pmirror using liballocs:
what is in liballocs?

hooks    (malloc, dlopen, ...)
some snapshotted stuff (end_addr, ...)
uniqtypes
l0index
l1index + deep indexing

Do we want to assume that this has been preloaded into the target process?
Probably not. We could get that by breakpointing malloc etc..

We could opportunistically use whatever in-process state there is.
But perhaps we should view that as an optimisation.
Doesn't that mean a big if (liballocs_preloaded) { ... } 

The interesting thing about pmirror is an API 
that can be implemented in-process or out-of-process.

- libpreflect -- a liballocs implementation
- libpinspect -- a remote implementation

What's in this API?

- symbols
- data types
- process statics: 
     - stack walking (just use libunwind)
     - query for the data type (a version of get_alloc_info)
- process dynamics: hook events (breakpoints, ...)

- ALSO: "views" / "levels of abstraction" idea:
       filtering (of symbols? objects / stack frames? fields/vars? control edges?)
       transformation of the same?
       
       -- can bootstrap using latent notions of interface vs implementation
          in metadata?
          e.g. field visibility private/protected/public,
          e.g. symbol visibility/binding
          e.g. opaqueness/non-opaqueness of structs outside of a single dyn.object
          e.g. calledness of a function from *outside* a dyn obj
                   vs called-only-within

Features to add to libprocessimage:

per-dieset object discovery handler for unions, void pointers, etc.

breakpoints / djprobes

notify on stack frame return (more portably than Amitabha's code?)


Refactoring to do:

isolate sysdeps 
